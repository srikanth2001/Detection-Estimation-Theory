import numpy as np
import math
randomstring = [9,9,6,8,9,8,9,2,3,8,1,6,9,7,9,9,6,9,6,7,8,6,8,1,6,8,7,8,9,9,9,8,6,8,6,8,6,9,6,9,6,6,1,7,9,6,9,8,6,9,8,8,8,8,8,1,0,6,6,7,8,9,6,9,6,7,2,5,8,9,8,6,6,6,0,9,9,8,1,9,9,9,6,8,6,6,2,8,8,8,8,1,9,6,9,6,1,9,6,2,9,9,8,8,6,7,9,9,8,9,6,6,7,1,2,8,6,8,9,9,8,7,6,6,6,8,9,6,2,6,9,9,9,8,7,0,8,2,6,8,6,8,7,9,1,9,9,6,9,9,1,7,6,6,2,8,9,6,4,8,8,6,8,8,1,8,7,6,7,9,9,9,1,6,7,6,9,8,2,1,8,9,2,9,8,1,2,9,9,7,9,9,6,8,8,6,6,9,1,9,7,2,7,9,6,8,7,7,8,9,9,8,6,4,6,9,0,9,9,9,6,9,3,9,6,8,8,6,4,9,7,7,9,6,9,8,9,6,9,6,1,8,8,8,6,6,2,9,9,7,7,7,8,9,2,8,8,9,0,9,8,8,6,9,9,7,9,9,9,8,9,4,6,9,9,6,1,8,8,8,8,9,7,1,6,6,9,8,8,0,8,6,8,0,7,2,6,6,9,8,6,7,6,8,9,9,1,9,6,9,6,0,2,6,2,0,8,1,9,9,8,6,6,7,9,9,9,8,9,7,7,4,6,6,8,8,1,9,6,1,6,8,6,2,2,0,1,4,6,6,6,9,8,6,2,8,8,6,7,2,6,8,6,1,6,8,6,6,7,9,9,1,9,6,9,6,6,6,8,9,6,6,9,8,1,9,9,1,9,8,9,6,4,6,6,6,6,6,6,7,6,9,6,6,1,6,8,9,9,8,1,9,6,2,8,8,7,9,9,6,3,6,8,7,7,6,9,8,6,8,6,8,9,9,6,8,6,6,8,7,6,8,8,9,6,6,9,6,9,8,6,8,8,8,6,7,6,9,6,9,8,9,7,1,6,9,8,7,0,8,9,8,6,2,9,6,7,8,9,6,6,7,1,7,7,8,2,8,9,7,4,7,7,9,6,9,6,8,6,6,9,8,0,9,7,6,6,6,6,8,9,9,7,8,6,9,5,8,0,8,0,8,6,9,9,8,6,9,9,5,9,8,6,6,8,6,6,9,1,6,9,9,7,8,6,9,9,1,0,9,9,1,9,8,9,1,6,1,9,6,6,8,7,8,9,9,6,8,9,6,8,1,1,2,9,4,9,9,7,9,2,8,0,9,6,9,9,8,6,0,2,9,9,5,2,9,6,6,9,6,2,6,6,0,6,4,8,6,6,7,9,8,7,7,9,1,8,1,1,7,6,8,8,8,8,6,0,9,9,9,1,8,9,6,6,1,0,8,6,9,8,9,9,8,9,3,4,6,9,9,1,8,6,9,8,9,6,9,9,8,0,7,9,7,9,9,9,7,6,9,6,6,8,9,6,9,9,7,8,5,1,8,6,1,8,9,9,9,9,8,9,2,6,2,9,1,9,1,9,9,9,1,0,9,6,7,6,4,6,6,1,6,8,5,2,6,8,6,7,9,9,7,8,6,1,8,9,6,1,9,9,6,5,8,8,9,0,1,8,7,9,9,6,8,2,8,6,8,8,1,4,8,8,6,6,9,6,8,8,9,6,8,8,6,8,9,1,8,1,0,8,1,9,8,9,9,6,6,9,9,9,8,6,9,9,9,9,6,7,8,9,7,1,8,9,6,9,6,9,6,6,7,8,8,6,1,9,9,8,5,9,0,2,6,9,6,9,8,9,2,1,7,9,9,9,9,9,9,7,6,8,6,8,9,9,9,9,6,6,1,9,0,9,7,9,8,7,9,8,7,1,6,8,7,8,7,6,8,8,9,8,6,7,9,6,8,8,8,0,9,9,8,6,9,0,2,9,9,8,0,6,9,6,0,9,9,6,9,9,6,9,6,8,6,9,9,1,6,9,8,1,9,9,6,9,8,9,8,8,8,6,8,2,8,8,6,2,9,7,1,6,8,8,8,9,6,7,0,8,8,6,8,0,8,9,9,6,6,8,6,2,9,9,9,2,9,6,9,9,9,8,7,4,8,1,1,9,4,9,6,6,9,9,9,9,8,9,6,8,9,9,6,1,8,4,9,9,8,6,9,8,6,9,9,6,9,1,7,7,7,2,9,9,9,8,7,6,8,6,9]
true_pmf = [0.028174293382292423,0.07743729104841117,0.04579980650698142,0.007817329374859235,0.01870404768857197,0.008672986887918347,0.2159639831281357,0.09031855685427055,0.21891226844319828,0.28819943668536097]


A =[]
for i in range(10):
  count = 0
  for j in range(len(randomstring)):
    if(randomstring[j]==i):
      count +=1
  A.append(count)
pmf_x_ML =[]
pmf_x_add =[]
for i in range(len(A)):
  pmf_x_ML.append(A[i]/len(randomstring))
  pmf_x_add.append((A[i]+1)/(len(randomstring)+10))
    
print("PMF of ML estimator    : ",pmf_x_ML)
print("PMF of add-1 estimator : ",pmf_x_add)

mse_x_ML =0
mse_x_add =0
for i in range(10):
  mse_x_ML +=  (true_pmf[i]-pmf_x_ML[i])**2
  mse_x_add +=  (true_pmf[i]-pmf_x_add[i])**2
print("")
print("MSE of ML estimator    : ",mse_x_ML)
print("MSE of asd-1 estimator : ",mse_x_add)

TV_x_ML = 0
TV_x_add_1 = 0
def TV_Prnt(a,b,c,d):
    for i in range(len(a)):
        b += (abs(c[i]-a[i]))/2
    print(d,b)
print("")   
TV_Prnt(pmf_x_ML, TV_x_ML, true_pmf,"TV of ML estimator    : ")
TV_Prnt(pmf_x_add, TV_x_add_1, true_pmf,"TV of add-1 estimator : ")

H_X = 0
for i in range(len(true_pmf)):
  H_X +=true_pmf[i]*(math.log(true_pmf[i],2))
print("Entropy of p_X:", H_X)
    
def Prnt(a,b,c,d,e):
    for i in range(len(a)):
        b += a[i]*(math.log(a[i],2))
    print("")
    print(c,b)
    print(e,abs(d-b))
    
print("")
H_ML= 0
H_add_1 = 0
Prnt(pmf_x_ML,H_ML,"Entropy of ML estimator     : ",H_X,"Comparision of  ML estimator: ")
Prnt(pmf_x_add,H_add_1, "Entropy of add-1 estimator    : ",H_X,"Comparision of add-1 estimator: ")
